#-----------------------------------------------------------
#           T A G M E    W I K I    P A T T E R N S
#-----------------------------------------------------------
#
#A file contaning some useful pattern to identify special pages and categories from wikipedia.
#All values are computed as standard Java regular expression and lower case is applied,
#otherwise different behaviour is specified. Charset must be UTF-8.
#Be carefull that values are trimmed, so if you want to include a blank char at the beginning
#of the value, you have to escape it (\u0020). 
#Moreover you have to escape backslashes doubling them (\\).
#See http://java.sun.com/javase/6/docs/api/java/util/Properties.html#load(java.io.Reader)
#for further details.
#
#-------------------
#    K E Y S
#------------------- 
#<lang>.disamb_cat
#	identifies categories that links every disambiguation page.
#	Only direct links are catched, no category graph visit is performed.
#	Match is performed against the category title with lowercasing
# 
#<lang>.disamb_suffix
#	identifies pages that have a disambiguation suffix in their title.
#	Match is performed against the whole title of the page, but lowercase is not applied
#
#<lang>.list_cat
#	identifies categories that links every list page. This is often an heuristic match...
#	Only direct links are catched, no category graph visit is performed.
#	Match is performed against the category title with lowercasing
#
#<lang>.people_cat
#	identifies categories that links every page of persons. This is often an heuristic match...
#	Only direct links are catched, no category graph visit is performed.
#	Match is performed against the category title
#
#<lang>.anchor_start
#	identifies a pattern at the beginning of each anchor that is ignored and removed from the anchor text.
#	Match is performed against the anchor that is lowercased and ASCII-normalized
#
#<lang>.anchor_stopwords
#	identifies a comma-separated listo of words that have to be removed from an anchor.
#	Match is performed against the anchor that is lowercased and ASCII-normalized and punctuations were removed
#
#<lang>.page_date
#	identifies a pattern of all possible calendar date expression, for discarding those pages that are dates 
#	Match is performed against the whole title, non-lowercased
#
#<lang>.page_ignore
#	identifies a pattern of pages that as to be ignored  
#	Match is performed against the whole title, non-lowercased



it.disamb_cat=^((disambigua)|(combinazioni di 2 caratteri)|(combinazioni di 3 caratteri))$
it.disamb_suffix=\u0020\\([Dd]isambigua\\)$
it.list_cat=^(liste .*)$
it.people_cat=^((nati nel \\d{1,4})|(morti nel \\d{1,4})|(persone viventi))$
it.anchor_start=^(il |la |lo |gli |le |l'|un |un'|una |i |uno )
it.anchor_stopwords=il,la,lo,gli,le,l,un,una,uno,del,dell,della,degli,dello,delle,di,a,da,in,con,su,per,tra,fra,col,e,ed,o,i,al,alla,allo,agli,alle,dal,dalle,dallo,dagli,dalla
it.page_date=^(([1-9][0-9]*)|([1-9][0-9]?[º°]? )?([Gg]ennaio|[Ff]ebbraio|[Mm]arzo|[Aa]prile|[Mm]aggio|[Gg]iugno|[Ll]uglio|[Aa]gosto|[Ss]ettembre|[Oo]ttobre|[Nn]ovembre|[Dd]icembre))$
it.page_ignore=^[0-9]+ (numero)$

en.disamb_cat=(all article disambiguation pages)|(all set index articles)
en.disamb_suffix=\u0020\\([Dd]isambiguation\\)$
en.list_cat=^((lists .*)|(.* lists))$
en.people_cat=^((\\d{1,4} births)|(\\d{1,4} deaths)|(living people))$
en.anchor_start=^(a |an |the )
en.anchor_stopwords=the,a,an,by,for,from,and,or,with,on,to,in
en.page_date=^(([1-9][0-9]*)|([Jj]anuary|[Ff]ebruary|[Mm]arch|[Aa]pril|[Mm]ay|[Jj]une|[Jj]uly|[Aa]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd][ie]cember)( [1-9][0-9]{0,3})?)$
en.page_ignore=^([0-9]+ (number))$
